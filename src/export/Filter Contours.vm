#**
This creates the java OpenCV Filter Contours function
*#//inputs
#set($inputs = $step.getInputs())
List<MatOfPoint> inputContours = $inputs.get(0).varName();
double minArea = $inputs.get(1).varName();
double minPerimeter = $inputs.get(2).varName();
double minWidth = $inputs.get(3).varName();
double maxWidth = $inputs.get(4).varName();
double minHeight = $inputs.get(5).varName();
double maxHeight = $inputs.get(6).varName();
double minSolidity = $inputs.get(7).varNameAsList().get(0);
double maxSolidity = $inputs.get(7).varNameAsList().get(1);
double minVertexCount = $inputs.get(8).varName();;
double maxVertexCount = $inputs.get(9).varName();;
double minRatio = $inputs.get(10).varName();;
double maxRatio = $inputs.get(11).varName();;
final MatOfInt hull = new MatOfInt();

//output
#set( $outputs = $step.getOutputs())
#set( $dst = $outputs.get(0).varName() )
List<MatOfPoint> $dst = new ArrayList<MatOfPoint>();
//operation

for (int i = 0; i < inputContours.size(); i++) {
	final MatOfPoint contour = inputContours.get(i);

	final Rect bb = Imgproc.boundingRect(contour);
	if (bb.width < minWidth || bb.width > maxWidth)
		continue;
	if (bb.height < minHeight || bb.height > maxHeight)
		continue;
	
	final double area = Imgproc.contourArea(contour);
	if (area < minArea)
		continue;
	if (Imgproc.arcLength(new MatOfPoint2f(contour.toArray()), true) < minPerimeter)
		continue;
	
	Imgproc.convexHull(contour, hull);
	MatOfPoint mopHull = new MatOfPoint();
	mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
	for (int j = 0; j < hull.size().height; j++) {
			int index = (int) hull.get(j, 0)[0];
		double[] point = new double[] { contour.get(index, 0)[0], contour.get(index, 0)[1] };
			mopHull.put(j, 0, point);
	}
	final double solidity = 100 * area / Imgproc.contourArea(mopHull);
	if (solidity < minSolidity || solidity > maxSolidity) continue;
	if (contour.rows() < minVertexCount || contour.rows() > maxVertexCount)	continue;
	final double ratio = bb.width / bb.height;
	if (ratio < minRatio || ratio > maxRatio)	continue;
		${dst}.add(contour);
}